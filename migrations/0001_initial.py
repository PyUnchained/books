# Generated by Django 2.2.6 on 2019-10-26 02:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=120, verbose_name='account name')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccountSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('financial_year_start', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='SingleEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, choices=[('D', 'Debit'), ('C', 'Credit')], max_length=1)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('details', models.CharField(max_length=300)),
                ('date', models.DateField()),
                ('account', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='books.Account')),
            ],
            options={
                'verbose_name_plural': 'Single Entries',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='SystemAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of business', max_length=200)),
                ('password', models.CharField(max_length=300)),
                ('email', models.EmailField(help_text='Used to login \n        as administrator.', max_length=254)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('settings', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='books.AccountSettings')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
                ('credit_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credi_transaction_definitions', to='books.Account')),
                ('debit_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debit_transaction_definitions', to='books.Account')),
                ('system_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_transaction', to='books.SingleEntry')),
                ('debit_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debit_transaction', to='books.SingleEntry')),
                ('definition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.TransactionDefinition')),
                ('system_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount')),
            ],
        ),
        migrations.AddField(
            model_name='singleentry',
            name='system_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount'),
        ),
        migrations.CreateModel(
            name='DeclaredSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debit', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('credit', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('details', models.CharField(max_length=140)),
                ('date', models.DateField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.Account')),
                ('system_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount')),
            ],
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=300, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='books.AccountGroup')),
                ('system_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='account',
            name='account_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.AccountGroup'),
        ),
        migrations.AddField(
            model_name='account',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='books.Account', verbose_name='parent account'),
        ),
        migrations.AddField(
            model_name='account',
            name='system_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount'),
        ),
        migrations.CreateModel(
            name='SystemUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False)),
                ('account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='books.SystemAccount')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
